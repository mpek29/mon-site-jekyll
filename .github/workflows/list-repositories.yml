name: List Repositories

on:
  push:
    branches:
      - master  # Trigger workflow on push to the master branch
  workflow_dispatch:  # Allow manual execution of the workflow

jobs:
  list_repositories:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Fetch the list of repositories with names, descriptions, and URLs
    - name: Store repositories in a variable
      id: list_repositories
      run: |
        echo "Fetching repository list..."
        
        # Récupérer les données via l'API GitHub
        REPOS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/users/mpek29/repos?type=all)
        
        # Vérifier si la réponse de l'API contient une erreur
        if echo "$REPOS_JSON" | jq -e 'has("message")' > /dev/null; then
          echo "❌ Erreur lors de la récupération des repos :"
          echo "$REPOS_JSON"
          exit 1
        fi

        # Transformer en liste de dictionnaires (nom + description + lien)
        REPOS_LIST=$(echo "$REPOS_JSON" | jq -c '[.[] | {title: .name, description: (.description // "No description available"), url: .html_url}]')

        # Vérifier si la liste est vide
        if [ -z "$REPOS_LIST" ] || [ "$REPOS_LIST" == "[]" ]; then
          echo "❌ Aucun dépôt trouvé pour l'utilisateur mpek29."
          exit 1
        fi

        # Stocker dans une variable d'environnement
        echo "REPOS_LIST=$REPOS_LIST" >> $GITHUB_ENV

    # Download images from each repository
    - name: Download repository images
      run: |
        echo "Downloading images from each repository..."
        mkdir -p assets/img/projects  # Créer le dossier parent s'il n'existe pas

        # Parcourir la liste des repos et télécharger les images
        echo "$REPOS_LIST" | jq -c '.[]' | while read -r repo; do
          title=$(echo "$repo" | jq -r '.title')
          repo_url=$(echo "$repo" | jq -r '.url')
          repo_name=$(basename "$repo_url")  # Récupérer uniquement le nom du repo

          # Vérifier si le dossier d'images existe
          IMG_PATH="https://github.com/mpek29/$repo_name/raw/master/assets/img/"
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$IMG_PATH")

          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "⚠️ Pas d'images trouvées pour $title, il sera ignoré."
            continue
          fi

          # Créer le dossier de destination
          DEST_FOLDER="assets/img/projects/$title"
          mkdir -p "$DEST_FOLDER"

          # Télécharger les images
          echo "📥 Téléchargement des images pour $title..."
          wget -q -r -np -nH --cut-dirs=3 -A "*.png,*.jpg,*.jpeg,*.gif" -P "$DEST_FOLDER" "$IMG_PATH"

          echo "✅ Images enregistrées dans $DEST_FOLDER"
        done

    # Create Markdown files for each repository in the _projects folder
    - name: Create Markdown files
      run: |
        echo "Creating Markdown files for each repository..."
        mkdir -p _projects  # Créer le dossier _projects s'il n'existe pas

        # Lire la liste de dictionnaires et générer les fichiers Markdown
        echo "$REPOS_LIST" | jq -c '.[]' | while read -r repo; do
          title=$(echo "$repo" | jq -r '.title')
          description=$(echo "$repo" | jq -r '.description')
          url=$(echo "$repo" | jq -r '.url')  # Récupérer l'URL

          # Vérifier que le titre n'est pas vide
          if [ -z "$title" ]; then
            echo "⚠️ Un dépôt sans nom détecté, il sera ignoré."
            continue
          fi

          # Définir le chemin de l'image principale (si disponible)
          img_path="assets/img/projects/$title/main.png"
          if [ ! -f "$img_path" ]; then
            img_path="assets/img/projects/default.png"  # Image par défaut si aucune image trouvée
          fi

          # Préparer le contenu Markdown
          markdown_content="---\n"
          markdown_content+="layout: page\n"
          markdown_content+="title: $title\n"
          markdown_content+="description: $description\n"
          markdown_content+="img: $img_path\n"
          markdown_content+="importance: 1\n"
          markdown_content+="git: $url\n"
          markdown_content+="category: 2025\n"
          markdown_content+="---\n\n"

          # Écrire dans le fichier
          echo -e "$markdown_content" > "_projects/$title.md"
          echo "✅ Created _projects/$title.md"
        done

    # Commit and push changes
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add _projects/*.md assets/img/projects/*
        git commit -m "Add Markdown files and images for repositories" || echo "No changes to commit"
        git push origin master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
