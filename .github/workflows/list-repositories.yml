name: List Repositories

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  list_repositories:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Store repositories in a variable
      id: list_repositories
      run: |
        echo "Fetching repository list..."
        
        REPOS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/users/mpek29/repos?type=all)
        
        if echo "$REPOS_JSON" | jq -e 'has("message")' > /dev/null; then
          echo "❌ Error fetching repos:"
          echo "$REPOS_JSON"
          exit 1
        fi

        REPOS_LIST=$(echo "$REPOS_JSON" | jq -c '[.[] | {title: .name, description: (.description // "No description available"), url: .html_url, topics: (.topics // [])}]')

        if [ -z "$REPOS_LIST" ] || [ "$REPOS_LIST" == "[]" ]; then
          echo "❌ No repositories found for user mpek29."
          exit 1
        fi

        echo "Successfully fetched repositories for user mpek29."
        echo "Repositories: $REPOS_LIST"
        echo "REPOS_LIST=$REPOS_LIST" >> $GITHUB_ENV

    - name: Create Markdown files
      run: |
        echo "Creating Markdown files for each repository..."
        mkdir -p _projects  

        echo "$REPOS_LIST" | jq -c '.[]' | while read -r repo; do
          title=$(echo "$repo" | jq -r '.title')

          echo "Processing repository: $title"

          if [[ "$title" == "MPek29" || "$title" == "en" || "$title" == "mon-site-jekyll" || "$title" == "mpek29.github.io" ]]; then
            echo "⚠️ Repository '$title' ignored."
            continue
          fi

          description=$(echo "$repo" | jq -r '.description')
          url=$(echo "$repo" | jq -r '.url')

          if [ -z "$title" ]; then
            echo "⚠️ Repository with no name detected, it will be ignored."
            continue
          fi

          # Determine category and subcategory
          main_topic="other"
          subcategory="General"

          for topic in $(echo "$repo" | jq -r '.topics[]'); do
            case "$topic" in
              "software-development") main_topic="Computer Science"; subcategory="Software Development" ;;
              "firmware-development") main_topic="Computer Science"; subcategory="Firmware Development" ;;
              "data-engineering") main_topic="Computer Science"; subcategory="Data Engineering" ;;
              "cybersecurity") main_topic="Computer Science"; subcategory="Cybersecurity" ;;
              "devops-automation") main_topic="Computer Science"; subcategory="DevOps & Automation" ;;
              "artificial-intelligence") main_topic="Computer Science"; subcategory="Artificial Intelligence" ;;
              "documentation") main_topic="Computer Science"; subcategory="Documentation" ;;
              "pcb-design") main_topic="Electronics"; subcategory="PCB Design" ;;
              "power-electronics") main_topic="Electronics"; subcategory="Power Electronics" ;;
              "signal-image-processing") main_topic="Electronics"; subcategory="Signal and Image Processing" ;;
              "pcb-reverse-engineering") main_topic="Electronics"; subcategory="PCB Reverse Engineering" ;;
              "pcb-repair") main_topic="Electronics"; subcategory="PCB Repair" ;;
              "digital-electronics") main_topic="Electronics"; subcategory="Digital Electronics" ;;
              "mechanical-design") main_topic="Mechanical Engineering"; subcategory="Mechanical Design" ;;
              "analysis-simulation") main_topic="Mechanical Engineering"; subcategory="Analysis and Simulation" ;;
              "fluid-mechanics") main_topic="Mechanical Engineering"; subcategory="Fluid Mechanics" ;;
              "materials-mechanics-materials") main_topic="Mechanical Engineering"; subcategory="Materials and Mechanics of Materials" ;;
              "control-systems") main_topic="Mechanical Engineering"; subcategory="Control Systems" ;;
            esac
          done

          # Check the content of assets/img directory in each repository
          echo "Cloning repository '$title' to check assets/img directory..."
          if ! git clone --depth=1 "https://github.com/mpek29/$title.git" "$title"; then
            echo "⚠️ Failed to clone repository '$title'. Continuing with the next repository..."
            continue  # Skip to the next repository
          fi

          img_dir="$title/assets/img"

          if [ -d "$img_dir" ]; then
            echo "✅ Found 'assets/img' directory in '$title'."
            img_files=$(find "$img_dir" -type f -iname '*.png')
            if [ -z "$img_files" ]; then
              echo "⚠️ No images found in 'assets/img' for repository '$title'."
              img_path="assets/img/projects/default.png"  # Default image if none found
            else
              echo "Images found in 'assets/img' for repository '$title':"
              echo "$img_files"

              # Create the target directory for images
              target_dir="assets/img/projects/$title"
              mkdir -p "$target_dir"

              # Copy images to the target directory
              for img in $img_files; do
                cp "$img" "$target_dir/"
    
