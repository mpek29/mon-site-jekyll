name: List Repositories

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  list_repositories:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Store repositories in a variable
      id: list_repositories
      run: |
        echo "Fetching repository list..."
        
        REPOS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/users/mpek29/repos?type=all)
        
        if echo "$REPOS_JSON" | jq -e 'has("message")' > /dev/null; then
          echo "❌ Erreur lors de la récupération des repos :"
          echo "$REPOS_JSON"
          exit 1
        fi

        REPOS_LIST=$(echo "$REPOS_JSON" | jq -c '[.[] | {title: .name, description: (.description // "No description available"), url: .html_url, topics: (.topics // [])}]')

        if [ -z "$REPOS_LIST" ] || [ "$REPOS_LIST" == "[]" ]; then
          echo "❌ Aucun dépôt trouvé pour l'utilisateur mpek29."
          exit 1
        fi

        echo "REPOS_LIST=$REPOS_LIST" >> $GITHUB_ENV

    - name: Create Markdown files
      run: |
        echo "Creating Markdown files for each repository..."
        mkdir -p _projects  

        echo "$REPOS_LIST" | jq -c '.[]' | while read -r repo; do
          title=$(echo "$repo" | jq -r '.title')

          if [[ "$title" == "MPek29" || "$title" == "en" || "$title" == "mon-site-jekyll" || "$title" == "mpek29.github.io" ]]; then
            echo "⚠️ Dépôt '$title' ignoré."
            continue
          fi

          description=$(echo "$repo" | jq -r '.description')
          url=$(echo "$repo" | jq -r '.url')

          if [ -z "$title" ]; then
            echo "⚠️ Un dépôt sans nom détecté, il sera ignoré."
            continue
          fi

          # Déterminer la catégorie et la sous-catégorie
          main_topic="other"
          subcategory="General"

          for topic in $(echo "$repo" | jq -r '.topics[]'); do
            case "$topic" in
              "software-development")
                main_topic="Computer Science"
                subcategory="Software Development"
                ;;
              "firmware-development")
                main_topic="Computer Science"
                subcategory="Firmware Development"
                ;;
              "data-engineering")
                main_topic="Computer Science"
                subcategory="Data Engineering"
                ;;
            esac
          done

          # Récupérer le contenu du README
          README_CONTENT=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                            -H "Accept: application/vnd.github.v3.raw" \
                            https://api.github.com/repos/mpek29/$title/readme)

          # Vérifier si le README contient des balises <img> et modifier les URLs
          if [[ ! -z "$README_CONTENT" ]]; then
            README_CONTENT=$(echo "$README_CONTENT" | sed -E 's#<img src="assets/img/([^"]+).png" width="([0-9]+)" height="([0-9]+)">#<img src="{{ site.baseurl }}/assets/img/projects/'$title'/\1.png" width="\2" height="\3">#g')
          fi

          img_path="assets/img/projects/$title/main.png"
          if [ ! -f "$img_path" ]; then
            if [ -f "assets/img/projects/$title/MANUAL_DOWNLOAD_REQUIRED" ]; then
              img_path="assets/img/projects/manual.png"  
              manual_note="\n\n⚠️ **Les images pour ce projet doivent être ajoutées manuellement.**"
            else
              img_path="assets/img/projects/default.png"  
              manual_note=""
            fi
          else
            manual_note=""
          fi

          markdown_content="---\n"
          markdown_content+="layout: page\n"
          markdown_content+="title: $title\n"
          markdown_content+="description: $description\n"
          markdown_content+="img: $img_path\n"
          markdown_content+="importance: 1\n"
          markdown_content+="git: $url\n"
          markdown_content+="category: $main_topic\n"
          markdown_content+="subcategory: $subcategory\n"
          markdown_content+="---\n\n"

          # Ajout de la ligne suivante "![Main Preview](assets/img/main.png)"
          markdown_content+="![Main Preview](assets/img/main.png)\n\n"

          # Ajout d'une note manuelle si nécessaire
          markdown_content+="$manual_note\n\n"

          # Ajout du README
          markdown_content+="## Description\n\n$README_CONTENT\n"

          echo -e "$markdown_content" > "_projects/$title.md"
          echo "✅ Created _projects/$title.md"
        done

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add _projects/*.md assets/img/projects/*
        git commit -m "Add Markdown files and images for repositories" || echo "No changes to commit"
        git push origin master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
