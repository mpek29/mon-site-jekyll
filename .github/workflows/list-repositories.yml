name: List Repositories

on:
  push:
    branches:
      - master  # Trigger workflow on push to the master branch
  workflow_dispatch:  # Allow manual execution of the workflow

jobs:
  list_repositories:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Fetch the list of repositories with names, descriptions, and URLs
    - name: Store repositories in a variable
      id: list_repositories
      run: |
        echo "Fetching repository list..."
        
        # Fetch data via the GitHub API
        REPOS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/users/mpek29/repos?type=all)
        
        # Check if the API response contains an error
        if echo "$REPOS_JSON" | jq -e 'has("message")' > /dev/null; then
          echo "❌ Error fetching repositories:"
          echo "$REPOS_JSON"
          exit 1  # Stop the workflow in case of error
        fi

        # Transform into a list of dictionaries (name + description + URL)
        REPOS_LIST=$(echo "$REPOS_JSON" | jq -c '[.[] | {title: .name, description: (.description // "No description available"), url: .html_url}]')

        # Check if the list is empty
        if [ -z "$REPOS_LIST" ] || [ "$REPOS_LIST" == "[]" ]; then
          echo "❌ No repositories found for user mpek29."
          exit 1
        fi

        # Store in an environment variable
        echo "REPOS_LIST=$REPOS_LIST" >> $GITHUB_ENV

    # Create Markdown files for each repository in the _projects folder
    - name: Create Markdown files
      run: |
        echo "Creating Markdown files for each repository..."
        mkdir -p _projects  # Create the _projects folder if it doesn't exist

        # Read the list of dictionaries and generate Markdown files
        echo "$REPOS_LIST" | jq -c '.[]' | while read -r repo; do
          title=$(echo "$repo" | jq -r '.title')
          description=$(echo "$repo" | jq -r '.description')
          url=$(echo "$repo" | jq -r '.url')  # Retrieve the URL

          # Check that the title is not empty
          if [ -z "$title" ]; then
            echo "⚠️ Repository without a name detected, it will be ignored."
            continue
          fi

          # Prepare the image path
          image_path="assets/img/$title/main.png"  # Update this path based on your structure

          # Prepare the content for Markdown
          markdown_content="---\n"
          markdown_content+="layout: page\n"
          markdown_content+="title: $title\n"
          markdown_content+="description: $description\n"
          markdown_content+="img: $image_path\n"  # Use the dynamic image path
          markdown_content+="importance: 1\n"
          markdown_content+="git: $url\n"  # Use the URL for the link to Git
          markdown_content+="category: 2025\n"
          markdown_content+="---\n\n"

          # Write to the file
          echo -e "$markdown_content" > "_projects/$title.md"
          echo "✅ Created _projects/$title.md"
        done

    # Optional: Stage the changes and commit them
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add _projects/*.md
        git commit -m "Add Markdown files for repositories" || echo "No changes to commit"
        git push origin master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub token for authentication
