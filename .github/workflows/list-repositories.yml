name: List Repositories

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  list_repositories:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Store repositories in a variable
      id: list_repositories
      run: |
        echo "Fetching repository list..."
        
        REPOS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/user/repos?type=all)

        if echo "$REPOS_JSON" | jq -e 'has("message")' > /dev/null; then
          echo "❌ Erreur lors de la récupération des repos :"
          echo "$REPOS_JSON"
          exit 1
        fi

        REPOS_LIST=$(echo "$REPOS_JSON" | jq -c '[.[] | {owner: .owner.login, title: .name, description: (.description // "No description available"), url: .html_url}]')

        if [ -z "$REPOS_LIST" ] || [ "$REPOS_LIST" == "[]" ]; then
          echo "❌ Aucun dépôt trouvé."
          exit 1
        fi

        echo "REPOS_LIST=$REPOS_LIST" >> $GITHUB_ENV

    - name: Download repository images
      run: |
        echo "Downloading images from each repository..."
        mkdir -p assets/img/projects

        echo "$REPOS_LIST" | jq -c '.[]' | while read -r repo; do
          title=$(echo "$repo" | jq -r '.title')
          owner=$(echo "$repo" | jq -r '.owner')  
          repo_name=$(echo "$repo" | jq -r '.title')

          if [ "$title" == "MPek29" ] || [ "$title" == "en" ] || [ "$title" == "mon-site-jekyll" ]; then
            echo "⚠️ Dépôt '$title' ignoré."
            continue
          fi

          API_URL="https://api.github.com/repos/$owner/$repo_name/contents/assets/img"

          FILES_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                              -H "Accept: application/vnd.github.v3+json" "$API_URL")

          if echo "$FILES_JSON" | jq -e 'if type == "array" then true else false end' > /dev/null; then
            DEST_FOLDER="assets/img/projects/$title"
            mkdir -p "$DEST_FOLDER"
            rm -rf "$DEST_FOLDER/*"  # Supprime les images existantes

            echo "$FILES_JSON" | jq -r '.[] | select(.type == "file") | .download_url' | while read -r file_url; do
              echo "📥 Téléchargement : $file_url"
              wget -q -P "$DEST_FOLDER" "$file_url"
            done

            echo "✅ Images enregistrées dans $DEST_FOLDER"
          else
            echo "⚠️ Pas d'images trouvées pour $title, il sera ignoré."
          fi
        done

    - name: Create Markdown files
      run: |
        echo "Creating Markdown files for each repository..."
        mkdir -p _projects

        echo "$REPOS_LIST" | jq -c '.[]' | while read -r repo; do
          title=$(echo "$repo" | jq -r '.title')
          description=$(echo "$repo" | jq -r '.description')
          url=$(echo "$repo" | jq -r '.url')

          if [ -z "$title" ]; then
            echo "⚠️ Un dépôt sans nom détecté, il sera ignoré."
            continue
          fi

          img_path="assets/img/projects/$title/main.png"
          if [ ! -f "$img_path" ]; then
            img_path="assets/img/projects/default.png"
          fi

          markdown_content="---\n"
          markdown_content+="layout: page\n"
          markdown_content+="title: $title\n"
          markdown_content+="description: $description\n"
          markdown_content+="img: $img_path\n"
          markdown_content+="importance: 1\n"
          markdown_content+="git: $url\n"
          markdown_content+="category: 2025\n"
          markdown_content+="---\n\n"

          echo -e "$markdown_content" > "_projects/$title.md"
          echo "✅ Created _projects/$title.md"
        done

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add _projects/*.md assets/img/projects/*
        git commit -m "Add Markdown files and images for repositories" || echo "No changes to commit"
        git push origin master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
